package frc.robot.subsystems;

import com.ctre.phoenix6.configs.Slot0Configs;
import com.ctre.phoenix6.mechanisms.swerve.SwerveDrivetrainConstants;
import com.ctre.phoenix6.mechanisms.swerve.SwerveModule.ClosedLoopOutputType;
import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstants.SteerFeedbackType;
import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstantsFactory;
import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstants;
import edu.wpi.first.math.util.Units;

// Generated by the Tuner X Swerve Project Generator
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
public class SwerveTuningConstants {
    // Both sets of gains need to be tuned to your individual robot.

    // The steer motor uses any SwerveModule.SteerRequestType control request with the
    // output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput
    private static final Slot0Configs steerGains = new Slot0Configs()
        .withKP(100).withKI(0).withKD(0.05)
        .withKS(0).withKV(1.5).withKA(0);
    // When using closed-loop control, the drive motor uses the control
    // output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput
    private static final Slot0Configs driveGains = new Slot0Configs()
        .withKP(3).withKI(0).withKD(0)
        .withKS(0).withKV(0).withKA(0);

    // The closed-loop output type to use for the steer motors;
    // This affects the PID/FF gains for the steer motors
    private static final ClosedLoopOutputType steerClosedLoopOutput = ClosedLoopOutputType.Voltage;
    // The closed-loop output type to use for the drive motors;
    // This affects the PID/FF gains for the drive motors
    private static final ClosedLoopOutputType driveClosedLoopOutput = ClosedLoopOutputType.Voltage;

    // The stator current at which the wheels start to slip;
    // This needs to be tuned to your individual robot
    private static final double kSlipCurrentA = 300.0;

    // Theoretical free speed (m/s) at 12v applied output;
    // This needs to be tuned to your individual robot
    public static final double kSpeedAt12VoltsMps = 4.32;

    // Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
    // This may need to be tuned to your individual robot
    private static final double kCoupleRatio = 3.5; 

    private static final double kDriveGearRatio = 7.84165385;
    private static final double kSteerGearRatio = 15.42857143;
    private static final double kWheelRadiusInches = 2.025; // Estimated at first, then fudge-factored to make odom match record

    private static final boolean kFrontLeftSteerReversed = false;
    private static final boolean kFrontRightSteerReversed = false;
    private static final boolean kBackSteerReversed = false;

    private static final boolean kFrontLeftDriveReversed = true;
    private static final boolean kFrontRightDriveReversed = false;
    private static final boolean kBackDriveReversed = true;

    private static final boolean kSteerMotorReversed = true;

    private static final String kCANbusName = "CANivore";
    private static final int kPigeonId = 5;


    // These are only used for simulation
    private static final double kSteerInertia = 0.00001;
    private static final double kDriveInertia = 0.001;
    // Simulated voltage necessary to overcome friction
    private static final double kSteerFrictionVoltage = 0.25;
    private static final double kDriveFrictionVoltage = 0.25;

    private static final SwerveDrivetrainConstants DrivetrainConstants = new SwerveDrivetrainConstants()
            .withPigeon2Id(kPigeonId)
            .withCANbusName(kCANbusName);

    private static final SwerveModuleConstantsFactory ConstantCreator = new SwerveModuleConstantsFactory()
            .withDriveMotorGearRatio(kDriveGearRatio)
            .withSteerMotorGearRatio(kSteerGearRatio)
            .withWheelRadius(kWheelRadiusInches)
            .withSlipCurrent(kSlipCurrentA)
            .withSteerMotorGains(steerGains)
            .withDriveMotorGains(driveGains)
            .withSteerMotorClosedLoopOutput(steerClosedLoopOutput)
            .withDriveMotorClosedLoopOutput(driveClosedLoopOutput)
            .withSpeedAt12VoltsMps(kSpeedAt12VoltsMps)
            .withSteerInertia(kSteerInertia)
            .withDriveInertia(kDriveInertia)
            .withSteerFrictionVoltage(kSteerFrictionVoltage)
            .withDriveFrictionVoltage(kDriveFrictionVoltage)
            .withFeedbackSource(SteerFeedbackType.FusedCANcoder)
            .withCouplingGearRatio(kCoupleRatio)
            .withSteerMotorInverted(kSteerMotorReversed);


    // Front Left
    private static final int kFrontLeftDriveMotorId = 12;
    private static final int kFrontLeftSteerMotorId = 22;
    private static final int kFrontLeftEncoderId = 2;
    private static final double kFrontLeftEncoderOffset = -0.16162;

    private static final double kFrontLeftXPosInches = 9.4195;
    private static final double kFrontLeftYPosInches = 9.4195;

    // Front Right
    private static final int kFrontRightDriveMotorId = 13;
    private static final int kFrontRightSteerMotorId = 23;
    private static final int kFrontRightEncoderId = 3;
    private static final double kFrontRightEncoderOffset = -0.044434;

    private static final double kFrontRightXPosInches = 9.4195;
    private static final double kFrontRightYPosInches = -9.4195;

    // Back 
    private static final int kBackDriveMotorId = 11;
    private static final int kBackSteerMotorId = 21;
    private static final int kBackEncoderId = 1;
    private static final double kBackEncoderOffset = -0.32324;

    private static final double kBackXPosInches = -9.4195;
    private static final double kBackYPosInches = 0.0;

    private static final SwerveModuleConstants FrontLeft = ConstantCreator.createModuleConstants(
            kFrontLeftSteerMotorId, kFrontLeftDriveMotorId, kFrontLeftEncoderId, kFrontLeftEncoderOffset, Units.inchesToMeters(kFrontLeftXPosInches), Units.inchesToMeters(kFrontLeftYPosInches), kFrontLeftSteerReversed).withDriveMotorInverted(kFrontLeftDriveReversed);
    private static final SwerveModuleConstants FrontRight = ConstantCreator.createModuleConstants(
            kFrontRightSteerMotorId, kFrontRightDriveMotorId, kFrontRightEncoderId, kFrontRightEncoderOffset, Units.inchesToMeters(kFrontRightXPosInches), Units.inchesToMeters(kFrontRightYPosInches), kFrontRightSteerReversed).withDriveMotorInverted(kFrontRightDriveReversed);
    private static final SwerveModuleConstants Back = ConstantCreator.createModuleConstants(
            kBackSteerMotorId, kBackDriveMotorId, kBackEncoderId, kBackEncoderOffset, Units.inchesToMeters(kBackXPosInches), Units.inchesToMeters(kBackYPosInches), kBackSteerReversed).withDriveMotorInverted(kBackDriveReversed);
    public static final SwerveDrivetrainSubsystem DriveTrain = new SwerveDrivetrainSubsystem(DrivetrainConstants, FrontLeft,
            FrontRight, Back);

}
